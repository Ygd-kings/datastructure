2.package secondOne;


	 import java.util.Scanner;
	 abstract class Employee
	 {
	 	
	 	Scanner sc=new Scanner(System.in);
	 	int sal;
	 	abstract void  takeSal();
	 	abstract int totalSal();

	 }

	 class Manager extends Employee
	 {
	 	void takeSal()
	 	{
	 		System.out.println("enter the manager salary");
	 		sal =sc.nextInt();
	 		System.out.println("enter the manager Incentive");
	 		inc=sc.nextInt();
	 	}
	 	int inc;
	 	int totalSal()
	 	{
	 		return sal+inc;
	 	}
	 }

	 class Labour extends Employee
	 {
	 	int ot;
	 	void takeSal()
	 	{
	 		System.out.println("enter the Labour salary");
	 		sal=sc.nextInt();
	 		System.out.println("enter the Labour Over time");
	 		ot=sc.nextInt();
	 	}
	 	int totalSal()
	 	{
	 		return sal+ot;
	 	}
	 	
	 }

	 class Sal
	 {
	 	void disp(Employee ref)
	 	{
	 		ref.takeSal();
	 		ref.totalSal();		
	 	}	
	 }
	 class Question2
	 {
	 	public static void main(String[] args) {
	 		Manager mg=new Manager();
	 		Labour l=new Labour();
	 		
	 		Sal s=new Sal();
	 		s.disp(mg);
	 		s.disp(l);
	 		System.out.println("Total Salary : "+(mg.totalSal()+l.totalSal()));
	 	}
	 }


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3.package SecondOne;


	
	import java.util.Scanner;
	abstract class BankAccount
	{
		
		Scanner sc=new Scanner(System.in);
		int rupees;
	    abstract int totalAmt();
	    abstract void amnt ();

	}

	class SB extends BankAccount
	{
		void amnt()
		{
			System.out.println("enter the fixed Deposit");
			rupees =sc.nextInt();
		}

		int totalAmt()
		{
			return rupees;
		}
	}

	class CA extends BankAccount
	{
		
		void amnt()
		{
			System.out.println("enter the Credit amount to Customer");
			rupees=sc.nextInt();
		}
		int totalAmt()
		{
			return rupees;
		}
		
	}

	class Amount
	{
		void disp(BankAccount ref)
		{
			ref.amnt();	
		}	
	}
	class Question3
	{
		public static void main(String[] args) {
			SB s=new SB();
			CA c=new CA();
			
			Amount a=new Amount();
			a.disp(s);
			a.disp(c);
			System.out.println("Total Amount in the Bank : "+(s.totalAmt()-c.totalAmt()));
		}
	}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4.package SecondOne;


	import java.util.*;
	
	abstract class Shape
	{    static  int a=6;
		static double length, width, area;
		
		static void takeInput()
		{
			Scanner sc=new Scanner(System.in);
		System.out.println("Enter the Size of the Length: ");
		length =sc.nextDouble();
		System.out.println("Enter the Size of the Width: ");
		width =sc.nextDouble();
		System.out.println("Enter the Size of the area : ");
		area =sc.nextDouble();
		}
		
		abstract void draw();
	}

	class Line extends Shape
	{
		void draw()
		{
			System.out.println("The length of the line: "+length);
		}
		
	}

	class Rectangle extends Shape
	{
		void draw()
		{
		System.out.println("The Reactangle of Given Area :"+ length*width);	
		}
	}

	class Cube extends Shape
	{
		
		double cube1=a*(area*area);
		void draw()
		{
			System.out.println(" The Cube of the Given Area:"+cube1);
		
		}
		
		}
	

	class Square extends Shape
	{
		void draw()
		{
			System.out.println("The Square of the Given Area: "+area*area);
		}
	}

	class Display
	{
	
		void disp(Shape ref)
		{
			
			ref.draw();
			
		}
	}
	class Question5
	{
		public static void main(String[] args)
		{
		Shape.takeInput();
		Line l=new Line();
		Rectangle r=new Rectangle();
		Cube c=new Cube();
		Square s=new Square();
		
		Display d=new Display();
		d.disp(l);
		d.disp(r);
		d.disp(c);
		d.disp(s);
		
		}
	}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
7.package Oops;


	import java.util.Scanner;
	 abstract class DessertItem
	{
		public abstract int getCost();

	}




	 class IceCream extends DessertItem{
		private int icecreamCost;
		private int icecreams;
		private int icecreamOrdered;
		
		
		private static IceCream singleton_obj=null;
		private IceCream()
		{
			//System.out.println("First instance");
		}
		public static IceCream getInstance()
		{
			if(singleton_obj==null)
			{
				singleton_obj=new IceCream();
			}
			return singleton_obj;
		}
		
		
		
		
		
		@Override
		public int getCost() {
			// TODO Auto-generated method stub
			System.out.println("Icecream cost:"+ this.icecreamCost +" Icecreams:"+this.icecreams+" icecreams ordered:"+this.icecreamOrdered);

			return this.icecreamCost*this.icecreamOrdered;
		}
		/**
		 * @param icecreamCost the icecreamCost to set
		 */
		public void setIcecreamCost(int icecreamCost) {
			this.icecreamCost = icecreamCost;
		}
		public void addiceCream(int icecreams) {
			// TODO Auto-generated method stub
			this.icecreams=icecreams;
			System.out.println("Icecream cost:"+ this.icecreamCost +" Icecreams:"+this.icecreams+" icecreams ordered:"+this.icecreamOrdered);

		}
		public void updateIceCreams(int icecreams) {
			// TODO Auto-generated method stub
			this.icecreams-=icecreams;
			this.icecreamOrdered=icecreams;
			
		}
		

	}



	 class Cookie extends DessertItem{
		private int cookieCost;
		private int cookies;
		private int cookiesOrdered;
		
		
		private static Cookie singleton_obj=null;
		private Cookie()
		{
			//System.out.println("First instance");
		}
		public static Cookie getInstance()
		{
			if(singleton_obj==null)
			{
				singleton_obj=new Cookie();
			}
			return singleton_obj;
		}
		
		
		
		
		@Override
		public int getCost() {
			// TODO Auto-generated method stub
			System.out.println("Cookie cost:"+ this.cookieCost +" Cookies:"+this.cookies+" cookies ordered:"+this.cookiesOrdered);

			return this.cookieCost*70*this.cookiesOrdered;
		}
		/**
		 * @param cookieCost the cookieCost to set
		 */
		public void setCookieCost(int cookieCost) {
			this.cookieCost = cookieCost;
		}
		public void addCookie(int cookies) {
			// TODO Auto-generated method stub
			this.cookies=cookies;
			System.out.println("Cookie cost:"+ this.cookieCost +" Cookies:"+this.cookies+" cookies ordered:"+this.cookiesOrdered);

			
		}
		public void updateCookies(int cookies2) {
			// TODO Auto-generated method stub
			this.cookies-=cookies2;
			this.cookiesOrdered=cookies2;
		}
		

	}


	 class Candy extends DessertItem {
		private int candycost;
		private int candies;
		private int candyOrdered;
		
		
		
		private static Candy singleton_obj=null;
		private Candy()
		{
			//System.out.println("First instance");
		}
		public static Candy getInstance()
		{
			if(singleton_obj==null)
			{
				singleton_obj=new Candy();
			}
			return singleton_obj;
		}
		
		
		
		
		@Override
		public int getCost() {
			// TODO Auto-generated method stub
			System.out.println("Candycost:"+ this.candycost +" Candies:"+this.candies+" candies ordered:"+this.candyOrdered);
			return this.candycost*60*this.candyOrdered;
			
		}
		/**
		 * @return the candycost
		 */
		
		/**
		 * @param candycost the candycost to set
		 */
		public void setCandycost(int candycost) {
			this.candycost = candycost;
		}

		public void addCandy(int candies) {
			// TODO Auto-generated method stub
			this.candies=candies;
			System.out.println("Candycost:"+ this.candycost +" Candies:"+this.candies+" candies ordered:"+this.candyOrdered);
			
		}

		public void updateCandies(int candies2) {
			// TODO Auto-generated method stub
			this.candies-=candies2;
			this.candyOrdered=candies2;
			
		}
		

	}


	 class Customer {

		private int candies;
		private int cookies;
		private int icecreams;
		private int totalCost;

		public void orderItems() {
			// TODO Auto-generated method stub
			Scanner sc=new Scanner(System.in);
			System.out.println("Enter the number of items you want to order");
			System.out.println("Enter number of candies:");
			this.candies=sc.nextInt();		
			System.out.println("Enter number of cookies:");
			this.cookies=sc.nextInt();
			System.out.println("Enter number of Ice creams:");
			this.icecreams=sc.nextInt();
			//Cookie co2 = new Cookie();
			Cookie co1=Cookie.getInstance();
			co1.updateCookies(cookies);
			Candy ca1=Candy.getInstance();
			ca1.updateCandies(candies);
			IceCream ice1=IceCream.getInstance();
			ice1.updateIceCreams(icecreams);
			this.totalCost=co1.getCost()+ca1.getCost()+ice1.getCost();
			System.out.println("The total cost is:"+this.totalCost);
		
		}
		

	}



	 class Owner {
		private int cookies;
		private int candies;
		private int icecreams;
		private int candiecost;
		private int cookiecost;
		private int icecreamcost;
		public void addItems() {
			// TODO Auto-generated method stub
			Scanner sc=new Scanner(System.in);
			Cookie co=Cookie.getInstance();
			Candy ca=Candy.getInstance();
			IceCream ice=IceCream.getInstance();
			System.out.println("Enter cost of candy in $:");
			candiecost = sc.nextInt();
			System.out.println("Enter cost of cookie in euros:");
			cookiecost=sc.nextInt();
			System.out.println("Enter cost of icecream in rs:");
			icecreamcost=sc.nextInt();
			co.setCookieCost(cookiecost);
			ca.setCandycost(candiecost);
			ice.setIcecreamCost(icecreamcost);
			
			System.out.println("Enter the number of items to be added in storage");
			System.out.println("Enter number of candies:");
			this.candies=sc.nextInt();		
			System.out.println("Enter number of cookies:");
			this.cookies=sc.nextInt();
			System.out.println("Enter number of Ice creams:");
			this.icecreams=sc.nextInt();	
			
			co.addCookie(cookies);
			
			ca.addCandy(candies);
			
			ice.addiceCream(icecreams);
		}

	}





	public class Question7 {

		public static void main(String[] args) {
			// TODO Auto-generated method stub
			
			Scanner sc=new Scanner(System.in);
			String s;
			do
			{
			System.out.print("Enter your role:");
			s = sc.next();
			if(s.equalsIgnoreCase("owner"))
			{
				Owner o=new Owner();
				o.addItems();
				System.out.println("Owner completed");
			}
			else if(s.equalsIgnoreCase("customer"))
			{
				Customer c=new Customer();
				c.orderItems();
			}
			else
			{
				System.out.println("Wrong choice..Try again");
			}

			}while(!s.equalsIgnoreCase("Stop"));
		}

	}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

